# Copyright 2020-2022 The Khronos Group Inc.
# SPDX-License-Identifier: Apache-2.0

REPOPATH = $(realpath ../..)
SPECPATH = $(REPOPATH)/specification/2.0

# Asciidoctor build variables
# Requires an up-to-date asciidoctor be installed.
# We recommend using the following image on dockerhub:
# docker pull khronosgroup/docker-images:asciidoctor-spec
ASCIIDOCTOR = asciidoctor $(ADOCOPTS)
ADOCOPTS = -d book
ADOCHTMLOPTS = -a stylesheet=khronos.css -a stylesdir=$(SPECPATH) -a sectanchors

# Spell out ISO 8601 format as not all date commands support --rfc-3339
SPECDATE = $(shell echo `date -u "+%Y-%m-%d %TZ"`)

# Generate AsciiDoc attributes for spec remark - see
# ../../specification/2.0/Makefile for comments
SPECREMARK = from git branch: $(shell echo `git symbolic-ref --short HEAD 2> /dev/null || echo Git branch not available`) \
	     commit: $(shell echo `git log -1 --format="%H" 2> /dev/null || echo Git commit not available`)

ATTRIBOPTS = -a revnumber="$(SPECREVISION)" \
	     -a revdate="$(SPECDATE)" \
	     -a revremark="$(SPECREMARK)"

# Extensions to generate. The wildcard could lead to false positives
SRCDIRS = $(wildcard Vendor/[A-Z]*_[A-Za-z]* Khronos/[A-Z]*_[A-Za-z]*)
#vpath %.adoc $(SRCDIRS)
.SUFFIXES:
.SUFFIXES: .adoc .html
VPATH = $(SRCDIRS)

# Names of the individual extensions
SOURCES = $(notdir $(SRCDIRS))

TARGETS = $(addsuffix .html, $(addprefix $(OUTDIR)/, $(SOURCES)))

# Where to generate HTML outputs
OUTDIR = out

all: $(TARGETS)
	echo "Built all"

define generateRules =
$(OUTDIR)/$(1).html: $(1).adoc
	@mkdir -p $(OUTDIR)
	$(ASCIIDOCTOR) -b html5 $(ADOCHTMLOPTS) $(ATTRIBOPTS) $$< -o $$@
endef

# Generate dependencies for each target.
# This is done dynamically since we don't know all the extensions
# without examining the extension directories.
$(foreach target,$(SOURCES),$(eval $(call generateRules,$(target))))



# Generate the Properties Reference section of the spec from JSON schema.
# This uses 'npx' to minimally install the 'wetzel' tool, if needed.
# When using embedded schemas, SCHEMALINK should be a relative path.

# Note this Makefile should remain locked to a particular version of
# wetzel, such that the history of changes to the documentation can
# accurately reflect changes to wetzel that impact the output here.
# Please manually upgrade the version as often as needed, without unlocking.

WETZEL = npx wetzel@0.2.2
SCHEMALINK = schema
EMBEDSCHEMA = JsonSchemaReference.adoc

# Base name of the generated properties reference file
PROPREF = PropertiesReference.adoc
# Files generated by wetzel
GENERATED = $(PROPREF) $(EMBEDSCHEMA)
# Schema files to leave out of $(PROPREF)
IGNORESCHEMA = '["gltfchildofrootproperty.schema.json", "glTFid.schema.json", "glTFProperty.schema.json"]'
# Where to find core glTF schemas
SEARCHPATH = ../../specification/2.0/schema
$(GENERATED): $(wildcard schema/*.json)
	$(WETZEL) -n -a=cqo -m=a -p "$(SCHEMALINK)" -e "$(EMBEDSCHEMA)" \
	    -i $(IGNORESCHEMA) -s $(SEARCHPATH) -c "icon:check[]" \
	    -k "**MUST**" schema/glTF.schema.json > $(PROPREF)

clean:
	-rm -f $(GENERATED) $(TARGETS)
