{
  "$schema": "http://json-schema.org/draft-04/schema",
  "title": "MPEG_scene_interactivity.action object",
  "type": "object",
  "description": "glTF extension to specify action formats",
  "properties": {
    "type": {
      "type": "string",
      "description": "the type of the action.Value is oneOf ACTION_ACTIVATE, ACTION_TRANSFORM, ACTION_BLOCK, ACTION_ANIMATION, ACTION_MEDIA, ACTION_MANIPULATE, ACTION_SET_MATERIAL, ACTION_SET_HAPTIC and can be extended"
    },
    "delay": {
      "type": "number",
      "description": "Duration of delay in second before executing the action"
    },
    "extensions": {},
    "extras": {}
  },
  "allOf": [
    {
      "$ref": "glTFProperty.schema.json"
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_ACTIVATE"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "activationStatus": {
            "enum": [
              "ENABLED",
              "DISABLED "
            ],
            "description": "ENABLED=0: the node shall be processed or skipped by the application"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "description": "Indices of the nodes in the nodes array to set the activation status"
          }
        },
        "required": [
          "activationStatus",
          "nodes"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_TRANSFORM"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "transform": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "minItems": 16,
            "maxitem": "16",
            "description": "transformation matrix to apply to the nodes"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "description": "Indices of the nodes in the nodes array to be transformed"
          }
        },
        "required": [
          "transform",
          "nodes"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_BLOCK"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "description": "Indices of the nodes in the nodes array to lock their related transforms."
          }
        },
        "required": [
          "nodes"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_ANIMATION"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "animation": {
            "type": "integer",
            "description": "index of the animation in the animations array to be considered "
          },
          "animationControl": {
            "type": "string",
            "description": "defines the control of the animation.Value is oneOf ANIMATION_PLAY, ANIMATION_PAUSE, ANIMATION_STOP, ANIMATION_RESUME and can be extended"
          }
        },
        "required": [
          "animation",
          "animationControl"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_MEDIA"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "media": {
            "type": "integer",
            "description": "Index of the media in the MPEG media array to be considered"
          },
          "mediaControl": {
            "type": "string",
            "description": "defines the control of the media.Value is oneOf MEDIA_PLAY, MEDIA_PAUSE, MEDIA_STOP, MEDIA_RESUME and can be extended"
          }
        },
        "required": [
          "media",
          "mediaControl"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_MANIPULATE"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "axis": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "minItems": 3,
            "maxItems": 3,
            "description": "coordinates of the axis used for rotation and sliding"
          },
          "manipulate_action_type": {
            "type": "string",
            "description": "defines the manipulation.Value is oneOf ACTION_MANIPULATE_FREE, ACTION_MANIPULATE_SLIDE, ACTION_MANIPULATE_TRANSLATE, ACTION_MANIPULATE_ROTATE,ACTION_MANIPULATE_SCALE and can be extended"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "description": "Indices of the nodes in the nodes array to be manipulated."
          }
        },
        "required": [
          "manipulate_action_type",
          "nodes"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_SET_MATERIAL"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "material": {
            "type": "integer",
            "description": "Index of the material in the materials array to apply to the nodes"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "description": "Indices of the nodes in the nodes array to set their material"
          }
        },
        "required": [
          "material",
          "nodes"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "ACTION_SET_HAPTIC"
          }
        },
        "required": [
          "type"
        ]
      },
      "then": {
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "minItems": 1,
            "description": "Indices of the nodes in the nodes array to launch their haptic feedbacks"
          }
        },
        "required": [
          "nodes"
        ]
      }
    }
  ],
  "required": [
    "type"
  ]
}