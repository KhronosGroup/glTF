{
    "$schema" : "http://json-schema.org/draft-04/schema",
    "title" : "accessor",
    "type" : "object",
    "description" : "A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.",
    "allOf" : [ { "$ref" : "glTFChildOfRootProperty.schema.json" } ],
    "properties" : {
        "bufferView" : {
            "allOf" : [ { "$ref" : "glTFid.schema.json" } ],
            "description" : "The ID of the bufferView."
        },
        "byteOffset" : {
            "type" : "integer",
            "description" : "The offset relative to the start of the bufferView in bytes.",
            "minimum" : 0,
            "gltf_detailedDescription" : "The offset relative to the start of the bufferView in bytes.  This must be a multiple of the size of the data type.",
            "gltf_webgl" : "`vertexAttribPointer()` offset parameter"
        },
        "byteStride" : {
            "type" : "integer",
            "description" : "The stride, in bytes, between attributes referenced by this accessor.",
            "minimum" : 0,
            "maximum" : 255,
            "default" : 0,
            "gltf_detailedDescription" : "The stride, in bytes, between attributes referenced by this accessor.  When this is zero, the attributes are tightly packed.",
            "gltf_webgl" : "`vertexAttribPointer()` stride parameter"
        },
        "componentType" : {
            "type" : "integer",
            "description" : "The datatype of components in the attribute.",
            "enum" : [5120, 5121, 5122, 5123, 5125, 5126],
            "gltf_enumNames" : ["BYTE", "UNSIGNED_BYTE", "SHORT", "UNSIGNED_SHORT", "UNSIGNED_INT", "FLOAT"],
            "gltf_detailedDescription" : "The datatype of components in the attribute.  All valid values correspond to WebGL enums.  The corresponding typed arrays are `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, `Uint32Array`, and `Float32Array`, respectively.  5125 (UNSIGNED_INT) is only allowed when the accessor contains indices and the OES_element_index_uint extension is used, i.e., the accessor is only referenced by `primitive.indices` and `glExtensionsUsed` contains `\"OES_element_index_uint\"`.",
            "gltf_webgl" : "`vertexAttribPointer()` type parameter"
        },
        "normalized" : {
            "type" : "boolean",
            "description" : "Specifies whether integer data values should be normalized.",
            "default" : false,
            "gltf_detailedDescription" : "Specifies whether integer data values should be normalized (`true`) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly (`false`) when they are accessed. Must be `false` when accessor is used for animation data.",
            "gltf_webgl" : "`vertexAttribPointer()` normalized parameter"
        },
        "count" : {
            "type" : "integer",
            "description" : "The number of attributes referenced by this accessor.",
            "minimum" : 1,
            "gltf_detailedDescription" : "The number of attributes referenced by this accessor, not to be confused with the number of bytes or number of components."
        },
        "type" : {
            "type" : "string",
            "description" : "Specifies if the attribute is a scalar, vector, or matrix.",
            "enum" : ["SCALAR", "VEC2", "VEC3", "VEC4", "MAT2", "MAT3", "MAT4"],
            "gltf_detailedDescription" : "Specifies if the attribute is a scalar, vector, or matrix, and the number of elements in the vector or matrix."
        },        
        "max" : {
            "type" : "array",
            "description" : "Maximum value of each component in this attribute.",
            "items" : {
                "type" : "number"
            },
            "minItems" : 1,
            "maxItems" : 16,
            "gltf_detailedDescription" : "Maximum value of each component in this attribute.  Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.\n\nWhen `componentType` is `5126` (FLOAT) each array value must be stored as double-precision JSON number with numerical value which is equal to buffer-stored single-precision value to avoid extra runtime conversions.\n\n`normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer."
        },
        "min" : {
            "type" : "array",
            "description" : "Minimum value of each component in this attribute.",
            "items" : {
                "type" : "number"
            },
            "minItems" : 1,
            "maxItems" : 16,
            "gltf_detailedDescription" : "Minimum value of each component in this attribute.  Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.\n\nWhen `componentType` is `5126` (FLOAT) each array value must be stored as double-precision JSON number with numerical value which is equal to buffer-stored single-precision value to avoid extra runtime conversions.\n\n`normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer."
        },
        "name" : {},
        "extensions" : {},
        "extras" : {}
    },
    "additionalProperties" : false,
    "required": ["bufferView", "byteOffset", "componentType", "count", "type", "max", "min"]
}
